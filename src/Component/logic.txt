            {!togggled ?<button className='sec-button button' onClick={() => { addToCart(shoe) }}>Add to Cart</button>:  <button>Added</button>}
<div onClick={() => toggleButton(shoe.name)}>
  {!shoeToggled[shoe.name] ? (
    <button className='sec-button button' onClick={() => addToCart(shoe)}>
      Add to Cart
    </button>
  ) : (
    <button>Added</button>
  )}
</div>
    <Router>
      <div className="App">
        <Navbar />
        <Routes>
          <Route path="/" element={<Section/>}>
          </Route>
          <Route path="/Cart" element={<Cart cartItems={cartItems} />}></Route>
        </Routes>
        <Shoes addToCart={addToCart}/>
      </div>
    </Router>
      <div className="App">
        <Navbar />
        <Section/>
        <Shoes addToCart={addToCart}/>
        <Cart cartItems={cartItems} />
      </div>

<Router>
  <div className="App">
    {/* Navbar component */}
    <Navbar />
    
    {/* Shoes component with addToCart function */}
    <Shoes addToCart={addToCart}/>

    {/* Routes for different pages */}
    <Routes>
      {/* Default route, renders Section component when the path is '/' */}
      <Route path="/" element={<Section />} />
      
      {/* Route for the Cart page, renders Cart component with cartItems */}
      <Route path="/Cart" element={<Cart cartItems={cartItems} />} />
    </Routes>
  </div>
</Router>

<Router>
  <div className="App">
    <Navbar />
    <Routes>
      <Route path="/" element={<Section />} />
          <Route path="/Cart" element={<Cart cartItems={cartItems} />} />
        </Routes>
        <Shoes addToCart={addToCart}/>
  </div>
</Router>
${item.price.toFixed(2)}
    background-color: #2d2d2d;
    display: flex;
    height: 180px;
    width: 100%;
    text-align: center;
    justify-content: center;
    color: #e0e0e0;
    border-bottom-left-radius: 10px;
    border-bottom-right-radius: 10px;
    padding-top: 1rem;
  const initialCartItems = JSON.parse(localStorage.getItem('cartItems')) || [];
  const [cartItems, setCartItems] = useState(initialCartItems);
   // Function to add an item to the cart
  const addToCart = (product) => {
    // Update the cartItems state
    const updatedCart = [...cartItems, product];
    setCartItems(updatedCart);

    // Save the updated cartItems to local storage
    localStorage.setItem('cartItems', JSON.stringify(updatedCart));
  };
  useEffect(() => {
  console.log(cartItems);
}, [cartItems]); // Dependency array ensures logging only when cartItems changes
  return (
const updateCartItemQuantity = (productName, newQuantity) => {
    setCartItems(prevCartItems => {
      const updatedCart = prevCartItems.map(item => {
        if (item.name === productName) {
          const quantity =  Math.max(0, newQuantity)
          return { ...item, quantity };
        }
        return item;
      });
      localStorage.setItem('cartItems', JSON.stringify(updatedCart));
      return updatedCart;
    });
  };
            <li className="display"><input hidden="" class="check-icon" id="check-icon" name="check-icon" type="checkbox">
            <label class="icon-menu" for="check-icon">
                <div class="bar bar--1"></div>
                <div class="bar bar--2"></div>
                <div class="bar bar--3"></div>
            </label></li>
  const [animationPaused, setAnimationPaused] = useState(false);

    useEffect(() => {
        let scrollTimeout;

        const handleScroll = () => {
            clearTimeout(scrollTimeout);
            setAnimationPaused(true);

            scrollTimeout = setTimeout(() => {
                setAnimationPaused(false);
            }, 500); // Adjust the delay according to your preference
        };

        window.addEventListener('scroll', handleScroll);

        return () => {
            window.removeEventListener('scroll', handleScroll);
        };
    }, []);


